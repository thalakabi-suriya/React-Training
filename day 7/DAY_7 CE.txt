import React, { useState } from 'react';
import axios from 'axios';

const AxiosDelete = () => {
  const [bookId, setBookId] = useState("");
  const [message, setMessage] = useState("");

  const handleDelete = async () => {
    try {
      const response = await axios.delete(`http://localhost:8080/books/${bookId}`);
      setMessage(`Book with ID ${bookId} deleted successfully`);
    } catch (error) {
      setMessage(`Error deleting book with ID ${bookId}`);
    }
  };

  return (
    <div>
      <h2>Delete Books</h2>
      <label>
        Enter Book ID to Delete:
        <input
          type='text'
          value={bookId}
          onChange={(e) => setBookId(e.target.value)}
        />
      </label>
      <button onClick={handleDelete}>Delete Book</button>
      {message && <p>{message}</p>}
    </div>
  );
};

export default AxioDelete;
import axios from 'axios'
import React, { useEffect,useState } from 'react'


const AxiosGet = () => {
    const [books,setBooks]=useState([]);
    useEffect(()=>{
        const fetchData=async()=>{
         try{
          const response=await axios.get("http://localhost:8080/books")
          console.log(response.data)
              setBooks(response.data);
         }
         catch(error){
  console.log(error)
         }};
       fetchData();
    },[]);
  return (
    <div>
        <table>
            <thead>
           <tr>
            <th>Id</th>
            <th>Book title</th>
            <th>Author name</th>
           </tr>
            </thead>
            <tbody>
            {books.map((book)=>(
                <tr key={book.id}>
                    <td>{book.id}</td>
                    <td>{book.title}</td>
                    <td>{book.author}</td>
                </tr>
            ))}
            </tbody>
        </table>
        
    </div>
  )
}

export default AxiosGet
import axios from 'axios';
import React, { useRef } from 'react'

const AxiosPost = () => {
    const bookIdRef=useRef("");
    const bookTitleRef=useRef(null);
    const bookAuthorRef=useRef(null);
  const handlePost= async()=>{
    const data={
        id:bookIdRef.current.value,
        title:bookTitleRef.current.value,
        author:bookAuthorRef.current.value
    };
    
       try {
        const response=await axios.post("http://localhost:8080/books",data);
        console.log(response)
       } catch (error) {
        console.log(error)
       }
    

  }
  return (
    <div>

        <input type='text' ref={bookIdRef}/>
        <input type='text' ref={bookTitleRef}/>
        <input type='text' ref={bookAuthorRef}/>
        <button onClick={handlePost}>Post</button>
    </div>
  )
}

export default AxiosPost
// CounterComponent.jsx
import React from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { increment, decrement } from '../counterSlice';

const CounterComponent = () => {
    const count = useSelector((state) => state.counter.count);
    const dispatch = useDispatch();

    const handleIncrement = () => {
        dispatch(increment());
    };

    const handleDecrement = () => {
        dispatch(decrement());
    };

    return (
        <div>
            <h2>Counter: {count}</h2>
            <button onClick={handleIncrement}>Increment</button>
            <button onClick={handleDecrement}>Decrement</button>
        </div>
    );
};

export default CounterComponent;
import React from 'react'

const FetchApi = () => {
  const handleFetch=()=>{
    fetch("http://localhost:8080/books")
    .then((response)=>response.json())
    .then((res)=>console.log(res))
    .catch(err=>console.log(err))

  }
  return (
    <div>
      
      <button onClick={handleFetch}>Fetch value</button>
    </div>
  )
}

export default FetchApi 
// counterSlice.js
import { createSlice } from "@reduxjs/toolkit";

const counterSlice = createSlice({
  name: 'counter',
  initialState: { count: 0 },
  reducers: {
    increment: (state) => {
      state.count += 1;
    },
    decrement: (state) => {
      if (state.count > 0) {
        state.count -= 1;
      }
    },
  },
});

export const { increment, decrement } = counterSlice.actions;
export default counterSlice.reducer;
import React from 'react'
import ReactDOM from 'react-dom/client'
import App from './App.jsx'
import './index.css'
import { Provider } from 'react-redux'
import store from './components/redux/store.js'

ReactDOM.createRoot(document.getElementById('root')).render(
  <Provider store={store}>
    <App />
  </Provider>,
)
// yourStoreConfiguration.js
import { configureStore } from '@reduxjs/toolkit';
import counterReducer from './counterSlice'; // Import your counter reducer

const store = configureStore({
  reducer: {
    counter: counterReducer,
    // ... other reducers
  },
});

export default store;